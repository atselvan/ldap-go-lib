// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GSSAPIClient is an autogenerated mock type for the GSSAPIClient type
type GSSAPIClient struct {
	mock.Mock
}

type GSSAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GSSAPIClient) EXPECT() *GSSAPIClient_Expecter {
	return &GSSAPIClient_Expecter{mock: &_m.Mock}
}

// DeleteSecContext provides a mock function with given fields:
func (_m *GSSAPIClient) DeleteSecContext() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GSSAPIClient_DeleteSecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSecContext'
type GSSAPIClient_DeleteSecContext_Call struct {
	*mock.Call
}

// DeleteSecContext is a helper method to define mock.On call
func (_e *GSSAPIClient_Expecter) DeleteSecContext() *GSSAPIClient_DeleteSecContext_Call {
	return &GSSAPIClient_DeleteSecContext_Call{Call: _e.mock.On("DeleteSecContext")}
}

func (_c *GSSAPIClient_DeleteSecContext_Call) Run(run func()) *GSSAPIClient_DeleteSecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GSSAPIClient_DeleteSecContext_Call) Return(_a0 error) *GSSAPIClient_DeleteSecContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GSSAPIClient_DeleteSecContext_Call) RunAndReturn(run func() error) *GSSAPIClient_DeleteSecContext_Call {
	_c.Call.Return(run)
	return _c
}

// InitSecContext provides a mock function with given fields: target, token
func (_m *GSSAPIClient) InitSecContext(target string, token []byte) ([]byte, bool, error) {
	ret := _m.Called(target, token)

	if len(ret) == 0 {
		panic("no return value specified for InitSecContext")
	}

	var r0 []byte
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(string, []byte) ([]byte, bool, error)); ok {
		return rf(target, token)
	}
	if rf, ok := ret.Get(0).(func(string, []byte) []byte); ok {
		r0 = rf(target, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []byte) bool); ok {
		r1 = rf(target, token)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(string, []byte) error); ok {
		r2 = rf(target, token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GSSAPIClient_InitSecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitSecContext'
type GSSAPIClient_InitSecContext_Call struct {
	*mock.Call
}

// InitSecContext is a helper method to define mock.On call
//   - target string
//   - token []byte
func (_e *GSSAPIClient_Expecter) InitSecContext(target interface{}, token interface{}) *GSSAPIClient_InitSecContext_Call {
	return &GSSAPIClient_InitSecContext_Call{Call: _e.mock.On("InitSecContext", target, token)}
}

func (_c *GSSAPIClient_InitSecContext_Call) Run(run func(target string, token []byte)) *GSSAPIClient_InitSecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *GSSAPIClient_InitSecContext_Call) Return(outputToken []byte, needContinue bool, err error) *GSSAPIClient_InitSecContext_Call {
	_c.Call.Return(outputToken, needContinue, err)
	return _c
}

func (_c *GSSAPIClient_InitSecContext_Call) RunAndReturn(run func(string, []byte) ([]byte, bool, error)) *GSSAPIClient_InitSecContext_Call {
	_c.Call.Return(run)
	return _c
}

// NegotiateSaslAuth provides a mock function with given fields: token, authzid
func (_m *GSSAPIClient) NegotiateSaslAuth(token []byte, authzid string) ([]byte, error) {
	ret := _m.Called(token, authzid)

	if len(ret) == 0 {
		panic("no return value specified for NegotiateSaslAuth")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string) ([]byte, error)); ok {
		return rf(token, authzid)
	}
	if rf, ok := ret.Get(0).(func([]byte, string) []byte); ok {
		r0 = rf(token, authzid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, string) error); ok {
		r1 = rf(token, authzid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GSSAPIClient_NegotiateSaslAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NegotiateSaslAuth'
type GSSAPIClient_NegotiateSaslAuth_Call struct {
	*mock.Call
}

// NegotiateSaslAuth is a helper method to define mock.On call
//   - token []byte
//   - authzid string
func (_e *GSSAPIClient_Expecter) NegotiateSaslAuth(token interface{}, authzid interface{}) *GSSAPIClient_NegotiateSaslAuth_Call {
	return &GSSAPIClient_NegotiateSaslAuth_Call{Call: _e.mock.On("NegotiateSaslAuth", token, authzid)}
}

func (_c *GSSAPIClient_NegotiateSaslAuth_Call) Run(run func(token []byte, authzid string)) *GSSAPIClient_NegotiateSaslAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string))
	})
	return _c
}

func (_c *GSSAPIClient_NegotiateSaslAuth_Call) Return(_a0 []byte, _a1 error) *GSSAPIClient_NegotiateSaslAuth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GSSAPIClient_NegotiateSaslAuth_Call) RunAndReturn(run func([]byte, string) ([]byte, error)) *GSSAPIClient_NegotiateSaslAuth_Call {
	_c.Call.Return(run)
	return _c
}

// NewGSSAPIClient creates a new instance of GSSAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGSSAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GSSAPIClient {
	mock := &GSSAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
